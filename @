// load the auth variables
var request = require('request');
module.exports = function(app, passport) {
// normal routes ===============================================================

        // show the home page (will also have our login links)
        app.get('/', function(req, res) {
                res.render('index.ejs');
        });

        // PROFILE SECTION =========================
        app.get('/profile', isLoggedIn, function(req, res) {
                res.render('profile.ejs', {
                        user : req.user
                });
        });


        // DAILOG SECTION =========================
        app.get('/dailog', isLoggedIn, function(req, res) {
                res.render("dailog.ejs", {
                        user : req.user,
                        state : global.state
                });
        });

        // LOGOUT ==============================
        app.get('/logout', function(req, res) {
                req.logout();
                res.redirect('/');
        });

        app.get('/client', function(req, res) {
                res.render("client.ejs");
        });

        app.post('/client', function(req, res) {
                var authorize_endpoint = req.body.authorize_endpoint;
                var token_endpoint = req.body.token_endpoint;
        });
// =============================================================================
// AUTHENTICATE (FIRST LOGIN) ==================================================
// =============================================================================

        // locally --------------------------------
                // LOGIN ===============================
                // show the login form
                    app.get('/login', function(req, res) {
                    global.state = req.query.state;
                    global.scope = req.query.scope;

                    request('https://acme-admin.3scale.net/admin/api/application_plans.json?provider_key=9062f7afd5a594f2e9882c34206eea67', function(error, response, body) {
                        if (!error && response.statusCode == 200) {
                            var parsedResponse = JSON.parse(body);
                            if (parsedResponse.plans[3].application_plan.name == global.scope) {
                                var application_id = parsedResponse.plans[3].application_plan.id;

                                request('https://acme-admin.3scale.net/admin/api/application_plans/2357355807483/features.json?provider_key=9062f7afd5a594f2e9882c34206eea67', function(error, response, body) {
                                    if (!error && response.statusCode == 200) {
                                        var parsedResponse = JSON.parse(body);
                                        if (parsedResponse.features[0].feature.system_name == global.scope) {
                                            var scope = parsedResponse.features[0].feature.system_name;
                                            var description = parsedResponse.features[0].feature.name;
                                            global.scope = scope;
                                            global.description = description;


                                        }
                                    }

                                })

                            }
                        }
                    })


                    res.render('login.ejs', {
                        message: req.flash('loginMessage'),
                        state: req.query.state
                    });
                });

                // process the login form
                app.post('/login', passport.authenticate('local-login', {
                        successRedirect : '/dailog', // redirect to the secure profile section
                        failureRedirect : '/login', // redirect back to the signup page if there is an error
                        failureFlash : true // allow flash messages
                }));

                // SIGNUP =================================
                // show the signup form
                app.get('/signup', function(req, res) {
                        res.render('signup.ejs', { message: req.flash('signupMessage') });
                });

                // process the signup form
                app.post('/signup', passport.authenticate('local-signup', {
                        successRedirect : '/dailog', // redirect to the secure profile section
                        failureRedirect : '/signup', // redirect back to the signup page if there is an error
                        failureFlash : true // allow flash messages
                }));

        // locally --------------------------------
                app.get('/connect/local', function(req, res) {
                        res.render('connect-local.ejs', { message: req.flash('loginMessage') });
                });
                app.post('/connect/local', passport.authenticate('local-signup', {
                        successRedirect : '/profile', // redirect to the secure profile section
                        failureRedirect : '/connect/local', // redirect back to the signup page if there is an error
                        failureFlash : true // allow flash messages
                }));


// =============================================================================
// UNLINK ACCOUNTS =============================================================
// =============================================================================
// used to unlink accounts. for social accounts, just remove the token
// for local account, remove email and password
// user account will stay active in case they want to reconnect in the future

        // local -----------------------------------
        app.get('/unlink/local', isLoggedIn, function(req, res) {
                var user            = req.user;
                user.local.email    = undefined;
                user.local.password = undefined;
                user.save(function(err) {
                        res.redirect('/profile');
                });
        });



};

// route middleware to ensure user is logged in
function isLoggedIn(req, res, next) {
        if (req.isAuthenticated())
                return next();

        res.redirect('/');
}
